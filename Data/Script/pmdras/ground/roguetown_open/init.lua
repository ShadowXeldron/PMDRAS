--[[
    init.lua
    Created: 07/12/2024 12:57:06
    Description: Autogenerated script file for the map roguetown_open.
]]--
-- Commonly included lua functions and data
require 'origin.common'

-- Package name
local roguetown_open = {}

-- Local, localized strings table
-- Use this to display the named strings you added in the strings files for the map!
-- Ex:
--      local localizedstring = STRINGS.MapStrings['SomeStringName']


-------------------------------
-- Map Callbacks
-------------------------------
---roguetown_open.Init(map)
--Engine callback function
function roguetown_open.Init(map)

    --This will fill the localized strings table automatically based on the locale the game is 
    -- currently in. You can use the MapStrings table after this line!
    

end

---roguetown_open.Enter(map)
--Engine callback function
function roguetown_open.Enter(map)

  GAME:FadeIn(20)

end

---roguetown_open.Exit(map)
--Engine callback function
function roguetown_open.Exit(map)


end

---roguetown_open.Update(map)
--Engine callback function
function roguetown_open.Update(map)


end

---roguetown_open.GameSave(map)
--Engine callback function
function roguetown_open.GameSave(map)


end

---roguetown_open.GameLoad(map)
--Engine callback function
function roguetown_open.GameLoad(map)

  GAME:FadeIn(20)

end

function roguetown_open.Talking_Nickit_Action(chara, activator)
    GROUND:CharTurnToChar(chara,CH('PLAYER'))
    UI:SetSpeaker(chara)
    UI:WaitShowDialogue(STRINGS:Format(STRINGS.MapStrings['NickitTalk']))
end

function roguetown_open.Talking_Hitmonlee_Action(chara, activator)
    GROUND:CharTurnToChar(chara,CH('PLAYER'))
    UI:SetSpeaker(chara)
    UI:WaitShowDialogue(STRINGS:Format(STRINGS.MapStrings['HitmonleeTalk']))
end

function roguetown_open.Talking_Hitmonchan_Action(chara, activator)
    GROUND:CharTurnToChar(chara,CH('PLAYER'))
    UI:SetSpeaker(chara)
    UI:WaitShowDialogue(STRINGS:Format(STRINGS.MapStrings['HitmonchanTalk']))
end

function roguetown_open.Talking_Hitmontop_Action(chara, activator)
    GROUND:CharTurnToChar(chara,CH('PLAYER'))
    UI:SetSpeaker(chara)
    UI:WaitShowDialogue(STRINGS:Format(STRINGS.MapStrings['HitmontopTalk']))
end

function roguetown_open.Talking_Excadrill_Action(chara, activator)
    GROUND:CharTurnToChar(chara,CH('PLAYER'))
    UI:SetSpeaker(chara)
    UI:WaitShowDialogue(STRINGS:Format(STRINGS.MapStrings['ExcadrillTalk']))
end

function roguetown_open.Talking_Espeon_Action(chara, activator)
    GROUND:CharTurnToChar(chara,CH('PLAYER'))
    UI:SetSpeaker(chara)
    UI:WaitShowDialogue(STRINGS:Format(STRINGS.MapStrings['EspeonTalk']))
end

function roguetown_open.Talking_Flygon_Action(chara, activator)
    GROUND:CharTurnToChar(chara,CH('PLAYER'))
    UI:SetSpeaker(chara)
    UI:WaitShowDialogue(STRINGS:Format(STRINGS.MapStrings['FlygonTalk']))
end

-- Copied directly from the vanilla base camp 2 script
function roguetown_open.Shop_Kecleon_Action(chara, activator)
    DEBUG.EnableDbgCoro() --Enable debugging this coroutine
  
    local state = 0
    local repeated = false
    local cart = {}
    local catalog = { }
    for ii = 1, #SV.base_shop, 1 do
	    local base_data = SV.base_shop[ii]
	    local item_data = { Item = RogueEssence.Dungeon.InvItem(base_data.Index, false, base_data.Amount), Price = base_data.Price }
	    table.insert(catalog, item_data)
    end
  
  
    local chara = CH('Shop_Kecleon')
    UI:SetSpeaker(chara)
  
	while state > -1 do
		if state == 0 then
			local msg = STRINGS:Format(STRINGS.MapStrings['Shop_Intro'])
			if repeated == true then
				msg = STRINGS:Format(STRINGS.MapStrings['Shop_Intro_Return'])
			end
			local shop_choices = {STRINGS:Format(STRINGS.MapStrings['Shop_Option_Buy']), STRINGS:Format(STRINGS.MapStrings['Shop_Option_Sell']),
			STRINGS:FormatKey("MENU_INFO"),
			STRINGS:FormatKey("MENU_EXIT")}
			UI:BeginChoiceMenu(msg, shop_choices, 1, 4)
			UI:WaitForChoice()
			local result = UI:ChoiceResult()
			repeated = true
			if result == 1 then
				if #catalog > 0 then
					--TODO: use the enum instead of a hardcoded number
					UI:WaitShowDialogue(STRINGS:Format(STRINGS.MapStrings['Shop_Buy'], STRINGS:LocalKeyString(26)))
					state = 1
				else
					UI:WaitShowDialogue(STRINGS:Format(STRINGS.MapStrings['Shop_Buy_Empty']))
				end
			elseif result == 2 then
				local bag_count = GAME:GetPlayerBagCount() + GAME:GetPlayerEquippedCount()
				if bag_count > 0 then
					--TODO: use the enum instead of a hardcoded number
					UI:WaitShowDialogue(STRINGS:Format(STRINGS.MapStrings['Shop_Sell'], STRINGS:LocalKeyString(26)))
					state = 3
				else
					UI:SetSpeakerEmotion("Angry")
					UI:WaitShowDialogue(STRINGS:Format(STRINGS.MapStrings['Shop_Bag_Empty']))
					UI:SetSpeakerEmotion("Normal")
				end
			elseif result == 3 then
				UI:WaitShowDialogue(STRINGS:Format(STRINGS.MapStrings['Shop_Info_001']))
				UI:WaitShowDialogue(STRINGS:Format(STRINGS.MapStrings['Shop_Info_002']))
				UI:WaitShowDialogue(STRINGS:Format(STRINGS.MapStrings['Shop_Info_003']))
				UI:WaitShowDialogue(STRINGS:Format(STRINGS.MapStrings['Shop_Info_004']))
				UI:WaitShowDialogue(STRINGS:Format(STRINGS.MapStrings['Shop_Info_005']))
			else
				UI:WaitShowDialogue(STRINGS:Format(STRINGS.MapStrings['Shop_Goodbye']))
				state = -1
			end
		elseif state == 1 then
			UI:ShopMenu(catalog)
			UI:WaitForChoice()
			local result = UI:ChoiceResult()
			if #result > 0 then
				local bag_count = GAME:GetPlayerBagCount() + GAME:GetPlayerEquippedCount()
				local bag_cap = GAME:GetPlayerBagLimit()
				if bag_count == bag_cap then
					UI:SetSpeakerEmotion("Angry")
					UI:WaitShowDialogue(STRINGS:Format(STRINGS.MapStrings['Shop_Bag_Full']))
					UI:SetSpeakerEmotion("Normal")
				else
					cart = result
					state = 2
				end
			else
				state = 0
			end
		elseif state == 2 then
			local total = 0
			for ii = 1, #cart, 1 do
				total = total + catalog[cart[ii]].Price
			end
			local msg
			if total > GAME:GetPlayerMoney() then
				UI:SetSpeakerEmotion("Angry")
				UI:WaitShowDialogue(STRINGS:Format(STRINGS.MapStrings['Shop_Buy_No_Money']))
				UI:SetSpeakerEmotion("Normal")
				state = 1
			else
				if #cart == 1 then
					local name = catalog[cart[1]].Item:GetDisplayName()
					msg = STRINGS:Format(STRINGS.MapStrings['Shop_Buy_One'], STRINGS:FormatKey("MONEY_AMOUNT", total), name)
				else
					msg = STRINGS:Format(STRINGS.MapStrings['Shop_Buy_Multi'], STRINGS:FormatKey("MONEY_AMOUNT", total))
				end
				UI:ChoiceMenuYesNo(msg, false)
				UI:WaitForChoice()
				result = UI:ChoiceResult()
				
				if result then
					GAME:RemoveFromPlayerMoney(total)
					for ii = 1, #cart, 1 do
						local item = catalog[cart[ii]].Item
						GAME:GivePlayerItem(item.ID, item.Amount, false)
					end
					for ii = #cart, 1, -1 do
						table.remove(catalog, cart[ii])
						table.remove(SV.base_shop, cart[ii])
					end
					
					cart = {}
					SOUND:PlayBattleSE("DUN_Money")
					UI:WaitShowDialogue(STRINGS:Format(STRINGS.MapStrings['Shop_Buy_Complete']))
					state = 0
				else
					state = 1
				end
			end
		elseif state == 3 then
			UI:SellMenu()
			UI:WaitForChoice()
			local result = UI:ChoiceResult()
			
			if #result > 0 then
				cart = result
				state = 4
			else
				state = 0
			end
		elseif state == 4 then
			local total = 0
			for ii = 1, #cart, 1 do
				local item
				if cart[ii].IsEquipped then
					item = GAME:GetPlayerEquippedItem(cart[ii].Slot)
				else
					item = GAME:GetPlayerBagItem(cart[ii].Slot)
				end
				total = total + item:GetSellValue()
			end
			local msg
			if #cart == 1 then
				local item
				if cart[1].IsEquipped then
					item = GAME:GetPlayerEquippedItem(cart[1].Slot)
				else
					item = GAME:GetPlayerBagItem(cart[1].Slot)
				end
				msg = STRINGS:Format(STRINGS.MapStrings['Shop_Sell_One'], STRINGS:FormatKey("MONEY_AMOUNT", total), item:GetDisplayName())
			else
				msg = STRINGS:Format(STRINGS.MapStrings['Shop_Sell_Multi'], STRINGS:FormatKey("MONEY_AMOUNT", total))
			end
			UI:ChoiceMenuYesNo(msg, false)
			UI:WaitForChoice()
			result = UI:ChoiceResult()
			
			if result then
				for ii = #cart, 1, -1 do
					if cart[ii].IsEquipped then
						GAME:TakePlayerEquippedItem(cart[ii].Slot, true)
					else
						GAME:TakePlayerBagItem(cart[ii].Slot, true)
					end
				end
				SOUND:PlayBattleSE("DUN_Money")
				GAME:AddToPlayerMoney(total)
				cart = {}
				UI:WaitShowDialogue(STRINGS:Format(STRINGS.MapStrings['Shop_Sell_Complete']))
				state = 0
			else
				state = 3
			end
		end
	end
end

function roguetown_open.Arena_Warp_Touch(chara, activator)
    -- if arena hasn't been unlocked yet
    UI:ResetSpeaker()
    UI:WaitShowDialogue(STRINGS:Format(STRINGS.MapStrings['Arena_Unfinished']))
    --
end

function roguetown_open.PC_Box_Action(chara, activator)
    DEBUG.EnableDbgCoro() --Enable debugging this coroutine
    UI:ResetSpeaker()
    COMMON.ShowTeamAssemblyMenu(obj, COMMON.RespawnAllies)
end

function roguetown_open.Item_Box_Action(chara, activator)
    DEBUG.EnableDbgCoro() --Enable debugging this coroutine
    COMMON:ShowTeamStorageMenu()
end

-------------------------------
-- Entities Callbacks
-------------------------------

function roguetown_open.Explorer_Base_Entrance_Touch(obj, activator)
    DEBUG.EnableDbgCoro() --Enable debugging this coroutine
    UI:WaitShowDialogue("This should send you to an area outside of a cave, but it doesn't. Whoopsie!'")
    local dungeon_entrances = { 'tropical_path', 'undergrowths', 'cobblestone_cave', 'spore_caves', 'fire_pit', 'groundwater_grotto', 'sandy_tombs', 'sickly_hollow', 'secret_garden'}
    COMMON.ShowDestinationMenu(dungeon_entrances)
end

return roguetown_open

